From 6495979502d90dbdc3972ea7b21d163c22ae9558 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Fri, 3 Aug 2018 22:47:46 -0400
Subject: [PATCH] Entity add to world fixes

1) Chunk Registration might kill an entity, don't add it to the world if it did!

2) By default, entities are added to the world per slice iteration.
This opens risk of the slices being manipulated during chunk add if an
EntityAddToWorldEvent spawns an entity into this chunk.
Fix this by differing entity add to world for all entities at the same time

3) If a duplicate entity is attempted to add to the world of an entity, and
the original entity is dead, overwrite it as the logic does for unloaod queued entities.

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index e4d5e65c8..0a3f00c3b 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -879,6 +879,7 @@ public class Chunk {
         this.world.b(this.tileEntities.values());
         List[] aentityslice = this.entitySlices; // Spigot
         int i = aentityslice.length;
+        List<Entity> toAdd = new java.util.ArrayList<>(32); // Paper
 
         for (int j = 0; j < i; ++j) {
             List entityslice = aentityslice[j]; // Spigot
@@ -926,10 +927,12 @@ public class Chunk {
                     thisChunk.put(entity.uniqueID, entity);
                 }
             }
-            // Paper end
 
-            this.world.a((Collection) entityslice);
+            //this.world.a((Collection) entityslice); // Move down, add all entities at same time
+            toAdd.addAll(entityslice);
+            // Paper end
         }
+        this.world.addChunkEntities(toAdd); // Paper - add all at same time to avoid entities adding to world modifying slice state
 
     }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 4a16f7ac7..04d0fa1df 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1204,6 +1204,7 @@ public abstract class World implements IBlockAccess {
             }
 
             this.getChunkAt(i, j).a(entity);
+            if (entity.dead) return false; // Paper - don't add dead entities, chunk registration may of killed it
             this.entityList.add(entity);
             this.b(entity);
             return true;
@@ -2743,6 +2744,7 @@ public abstract class World implements IBlockAccess {
         return i;
     }
 
+    public void addChunkEntities(Collection<Entity> collection) { a(collection); } // Paper - OBFHELPER
     public void a(Collection<Entity> collection) {
         org.spigotmc.AsyncCatcher.catchOp( "entity world add"); // Spigot
         // CraftBukkit start
@@ -2752,7 +2754,7 @@ public abstract class World implements IBlockAccess {
         while (iterator.hasNext()) {
             Entity entity = (Entity) iterator.next();
 
-            if (entity == null) {
+            if (entity == null || entity.dead || entity.valid) { // Paper - prevent adding already added or dead entities
                 continue;
             }
             this.entityList.add(entity);
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 1244baf45..a14b5e061 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -1173,7 +1173,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             if (this.entitiesByUUID.containsKey(uuid)) {
                 Entity entity1 = (Entity) this.entitiesByUUID.get(uuid);
 
-                if (this.f.contains(entity1)) {
+                if (this.f.contains(entity1) || entity1.dead) { // Paper - if dupe is dead, overwrite
                     this.f.remove(entity1);
                 } else {
                     if (!(entity instanceof EntityHuman)) {
-- 
2.35.1

